<?php
/**
 * QualificationApi
 * PHP version 5
 *
 * @category Class
 * @package  QualificationClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * qualification-client
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.22
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace QualificationClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use QualificationClient\ApiException;
use QualificationClient\Configuration;
use QualificationClient\HeaderSelector;
use QualificationClient\ObjectSerializer;

/**
 * QualificationApi Class Doc Comment
 *
 * @category Class
 * @package  QualificationClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class QualificationApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createWorkerQualification
     *
     * Create a new qualification
     *
     * @param  int $worker_id ID of a worker (required)
     * @param  string $qualification_type Qualification type. (required)
     * @param  \QualificationClient\Model\PostQualificationRequest $qualification qualification (required)
     *
     * @throws \QualificationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \QualificationClient\Model\QualificationResponse[]
     */
    public function createWorkerQualification($worker_id, $qualification_type, $qualification)
    {
        list($response) = $this->createWorkerQualificationWithHttpInfo($worker_id, $qualification_type, $qualification);
        return $response;
    }

    /**
     * Operation createWorkerQualificationWithHttpInfo
     *
     * Create a new qualification
     *
     * @param  int $worker_id ID of a worker (required)
     * @param  string $qualification_type Qualification type. (required)
     * @param  \QualificationClient\Model\PostQualificationRequest $qualification (required)
     *
     * @throws \QualificationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \QualificationClient\Model\QualificationResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createWorkerQualificationWithHttpInfo($worker_id, $qualification_type, $qualification)
    {
        $returnType = '\QualificationClient\Model\QualificationResponse[]';
        $request = $this->createWorkerQualificationRequest($worker_id, $qualification_type, $qualification);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\QualificationClient\Model\QualificationResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\QualificationClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createWorkerQualificationAsync
     *
     * Create a new qualification
     *
     * @param  int $worker_id ID of a worker (required)
     * @param  string $qualification_type Qualification type. (required)
     * @param  \QualificationClient\Model\PostQualificationRequest $qualification (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createWorkerQualificationAsync($worker_id, $qualification_type, $qualification)
    {
        return $this->createWorkerQualificationAsyncWithHttpInfo($worker_id, $qualification_type, $qualification)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createWorkerQualificationAsyncWithHttpInfo
     *
     * Create a new qualification
     *
     * @param  int $worker_id ID of a worker (required)
     * @param  string $qualification_type Qualification type. (required)
     * @param  \QualificationClient\Model\PostQualificationRequest $qualification (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createWorkerQualificationAsyncWithHttpInfo($worker_id, $qualification_type, $qualification)
    {
        $returnType = '\QualificationClient\Model\QualificationResponse[]';
        $request = $this->createWorkerQualificationRequest($worker_id, $qualification_type, $qualification);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createWorkerQualification'
     *
     * @param  int $worker_id ID of a worker (required)
     * @param  string $qualification_type Qualification type. (required)
     * @param  \QualificationClient\Model\PostQualificationRequest $qualification (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createWorkerQualificationRequest($worker_id, $qualification_type, $qualification)
    {
        // verify the required parameter 'worker_id' is set
        if ($worker_id === null || (is_array($worker_id) && count($worker_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $worker_id when calling createWorkerQualification'
            );
        }
        // verify the required parameter 'qualification_type' is set
        if ($qualification_type === null || (is_array($qualification_type) && count($qualification_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $qualification_type when calling createWorkerQualification'
            );
        }
        // verify the required parameter 'qualification' is set
        if ($qualification === null || (is_array($qualification) && count($qualification) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $qualification when calling createWorkerQualification'
            );
        }

        $resourcePath = '/workers/{worker_id}/qualifications/{qualification_type}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($worker_id !== null) {
            $resourcePath = str_replace(
                '{' . 'worker_id' . '}',
                ObjectSerializer::toPathValue($worker_id),
                $resourcePath
            );
        }
        // path params
        if ($qualification_type !== null) {
            $resourcePath = str_replace(
                '{' . 'qualification_type' . '}',
                ObjectSerializer::toPathValue($qualification_type),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($qualification)) {
            $_tempBody = $qualification;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation endTranslatorProbation
     *
     * Remove worker from probation
     *
     * @param  \QualificationClient\Model\ProbationRequest $probation probation (required)
     *
     * @throws \QualificationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \QualificationClient\Model\ProbationResponse[]
     */
    public function endTranslatorProbation($probation)
    {
        list($response) = $this->endTranslatorProbationWithHttpInfo($probation);
        return $response;
    }

    /**
     * Operation endTranslatorProbationWithHttpInfo
     *
     * Remove worker from probation
     *
     * @param  \QualificationClient\Model\ProbationRequest $probation (required)
     *
     * @throws \QualificationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \QualificationClient\Model\ProbationResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function endTranslatorProbationWithHttpInfo($probation)
    {
        $returnType = '\QualificationClient\Model\ProbationResponse[]';
        $request = $this->endTranslatorProbationRequest($probation);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\QualificationClient\Model\ProbationResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\QualificationClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation endTranslatorProbationAsync
     *
     * Remove worker from probation
     *
     * @param  \QualificationClient\Model\ProbationRequest $probation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endTranslatorProbationAsync($probation)
    {
        return $this->endTranslatorProbationAsyncWithHttpInfo($probation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation endTranslatorProbationAsyncWithHttpInfo
     *
     * Remove worker from probation
     *
     * @param  \QualificationClient\Model\ProbationRequest $probation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endTranslatorProbationAsyncWithHttpInfo($probation)
    {
        $returnType = '\QualificationClient\Model\ProbationResponse[]';
        $request = $this->endTranslatorProbationRequest($probation);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'endTranslatorProbation'
     *
     * @param  \QualificationClient\Model\ProbationRequest $probation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function endTranslatorProbationRequest($probation)
    {
        // verify the required parameter 'probation' is set
        if ($probation === null || (is_array($probation) && count($probation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $probation when calling endTranslatorProbation'
            );
        }

        $resourcePath = '/workers/qualifications/probations/end';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($probation)) {
            $_tempBody = $probation;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQualificationHistory
     *
     * Get qualification history
     *
     * @param  string $qualification_type Qualification type. (required)
     * @param  int $qualification_id ID of a Qualification (required)
     * @param  string $sort_by Columns to sort. &#39;-&#39; for descending; &#39;+&#39; for ascending. Example: &#39;-ctime&#39; (optional)
     * @param  int $page Current page (optional)
     * @param  string[] $status status (optional)
     * @param  int $limit No. of items per page (optional)
     *
     * @throws \QualificationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \QualificationClient\Model\QualificationHistoryResponse[]
     */
    public function getQualificationHistory($qualification_type, $qualification_id, $sort_by = null, $page = null, $status = null, $limit = null)
    {
        list($response) = $this->getQualificationHistoryWithHttpInfo($qualification_type, $qualification_id, $sort_by, $page, $status, $limit);
        return $response;
    }

    /**
     * Operation getQualificationHistoryWithHttpInfo
     *
     * Get qualification history
     *
     * @param  string $qualification_type Qualification type. (required)
     * @param  int $qualification_id ID of a Qualification (required)
     * @param  string $sort_by Columns to sort. &#39;-&#39; for descending; &#39;+&#39; for ascending. Example: &#39;-ctime&#39; (optional)
     * @param  int $page Current page (optional)
     * @param  string[] $status (optional)
     * @param  int $limit No. of items per page (optional)
     *
     * @throws \QualificationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \QualificationClient\Model\QualificationHistoryResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getQualificationHistoryWithHttpInfo($qualification_type, $qualification_id, $sort_by = null, $page = null, $status = null, $limit = null)
    {
        $returnType = '\QualificationClient\Model\QualificationHistoryResponse[]';
        $request = $this->getQualificationHistoryRequest($qualification_type, $qualification_id, $sort_by, $page, $status, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\QualificationClient\Model\QualificationHistoryResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\QualificationClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQualificationHistoryAsync
     *
     * Get qualification history
     *
     * @param  string $qualification_type Qualification type. (required)
     * @param  int $qualification_id ID of a Qualification (required)
     * @param  string $sort_by Columns to sort. &#39;-&#39; for descending; &#39;+&#39; for ascending. Example: &#39;-ctime&#39; (optional)
     * @param  int $page Current page (optional)
     * @param  string[] $status (optional)
     * @param  int $limit No. of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualificationHistoryAsync($qualification_type, $qualification_id, $sort_by = null, $page = null, $status = null, $limit = null)
    {
        return $this->getQualificationHistoryAsyncWithHttpInfo($qualification_type, $qualification_id, $sort_by, $page, $status, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQualificationHistoryAsyncWithHttpInfo
     *
     * Get qualification history
     *
     * @param  string $qualification_type Qualification type. (required)
     * @param  int $qualification_id ID of a Qualification (required)
     * @param  string $sort_by Columns to sort. &#39;-&#39; for descending; &#39;+&#39; for ascending. Example: &#39;-ctime&#39; (optional)
     * @param  int $page Current page (optional)
     * @param  string[] $status (optional)
     * @param  int $limit No. of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualificationHistoryAsyncWithHttpInfo($qualification_type, $qualification_id, $sort_by = null, $page = null, $status = null, $limit = null)
    {
        $returnType = '\QualificationClient\Model\QualificationHistoryResponse[]';
        $request = $this->getQualificationHistoryRequest($qualification_type, $qualification_id, $sort_by, $page, $status, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQualificationHistory'
     *
     * @param  string $qualification_type Qualification type. (required)
     * @param  int $qualification_id ID of a Qualification (required)
     * @param  string $sort_by Columns to sort. &#39;-&#39; for descending; &#39;+&#39; for ascending. Example: &#39;-ctime&#39; (optional)
     * @param  int $page Current page (optional)
     * @param  string[] $status (optional)
     * @param  int $limit No. of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQualificationHistoryRequest($qualification_type, $qualification_id, $sort_by = null, $page = null, $status = null, $limit = null)
    {
        // verify the required parameter 'qualification_type' is set
        if ($qualification_type === null || (is_array($qualification_type) && count($qualification_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $qualification_type when calling getQualificationHistory'
            );
        }
        // verify the required parameter 'qualification_id' is set
        if ($qualification_id === null || (is_array($qualification_id) && count($qualification_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $qualification_id when calling getQualificationHistory'
            );
        }

        $resourcePath = '/qualifications/{qualification_type}/{qualification_id}/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sort_by !== null) {
            $queryParams['sort_by'] = ObjectSerializer::toQueryValue($sort_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if (is_array($status)) {
            $queryParams['status'] = $status;
        } else
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }

        // path params
        if ($qualification_type !== null) {
            $resourcePath = str_replace(
                '{' . 'qualification_type' . '}',
                ObjectSerializer::toPathValue($qualification_type),
                $resourcePath
            );
        }
        // path params
        if ($qualification_id !== null) {
            $resourcePath = str_replace(
                '{' . 'qualification_id' . '}',
                ObjectSerializer::toPathValue($qualification_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQualificationTypes
     *
     * Get all types of qualifications
     *
     *
     * @throws \QualificationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \QualificationClient\Model\QualificationTypeResponse[]
     */
    public function getQualificationTypes()
    {
        list($response) = $this->getQualificationTypesWithHttpInfo();
        return $response;
    }

    /**
     * Operation getQualificationTypesWithHttpInfo
     *
     * Get all types of qualifications
     *
     *
     * @throws \QualificationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \QualificationClient\Model\QualificationTypeResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getQualificationTypesWithHttpInfo()
    {
        $returnType = '\QualificationClient\Model\QualificationTypeResponse[]';
        $request = $this->getQualificationTypesRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\QualificationClient\Model\QualificationTypeResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\QualificationClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQualificationTypesAsync
     *
     * Get all types of qualifications
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualificationTypesAsync()
    {
        return $this->getQualificationTypesAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQualificationTypesAsyncWithHttpInfo
     *
     * Get all types of qualifications
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualificationTypesAsyncWithHttpInfo()
    {
        $returnType = '\QualificationClient\Model\QualificationTypeResponse[]';
        $request = $this->getQualificationTypesRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQualificationTypes'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQualificationTypesRequest()
    {

        $resourcePath = '/qualifications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQualifications
     *
     * Get all qualifications of the given qualification type
     *
     * @param  string $qualification_type Qualification type. (required)
     * @param  int $id ID of a qualification (optional)
     * @param  int $worker_id ID of a worker (optional)
     * @param  string $status Status of a qualification (optional)
     * @param  string $rank Rank of a qualification (optional)
     * @param  string $lc_src Language source. Example: &#39;en&#39; (optional)
     * @param  string $lc_tgt Language target. Example: &#39;ja&#39; (optional)
     * @param  int $preferred_by Preferred worker by a customer ID (optional)
     * @param  string $sort_by Columns to sort. &#39;-&#39; for descending; &#39;+&#39; for ascending. Example: &#39;-ctime&#39; (optional)
     * @param  int $page Current page (optional)
     * @param  int $limit No. of items per page (optional)
     * @param  bool $get_scores true to get qualification scores (optional)
     *
     * @throws \QualificationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \QualificationClient\Model\QualificationResponse[]
     */
    public function getQualifications($qualification_type, $id = null, $worker_id = null, $status = null, $rank = null, $lc_src = null, $lc_tgt = null, $preferred_by = null, $sort_by = null, $page = null, $limit = null, $get_scores = null)
    {
        list($response) = $this->getQualificationsWithHttpInfo($qualification_type, $id, $worker_id, $status, $rank, $lc_src, $lc_tgt, $preferred_by, $sort_by, $page, $limit, $get_scores);
        return $response;
    }

    /**
     * Operation getQualificationsWithHttpInfo
     *
     * Get all qualifications of the given qualification type
     *
     * @param  string $qualification_type Qualification type. (required)
     * @param  int $id ID of a qualification (optional)
     * @param  int $worker_id ID of a worker (optional)
     * @param  string $status Status of a qualification (optional)
     * @param  string $rank Rank of a qualification (optional)
     * @param  string $lc_src Language source. Example: &#39;en&#39; (optional)
     * @param  string $lc_tgt Language target. Example: &#39;ja&#39; (optional)
     * @param  int $preferred_by Preferred worker by a customer ID (optional)
     * @param  string $sort_by Columns to sort. &#39;-&#39; for descending; &#39;+&#39; for ascending. Example: &#39;-ctime&#39; (optional)
     * @param  int $page Current page (optional)
     * @param  int $limit No. of items per page (optional)
     * @param  bool $get_scores true to get qualification scores (optional)
     *
     * @throws \QualificationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \QualificationClient\Model\QualificationResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getQualificationsWithHttpInfo($qualification_type, $id = null, $worker_id = null, $status = null, $rank = null, $lc_src = null, $lc_tgt = null, $preferred_by = null, $sort_by = null, $page = null, $limit = null, $get_scores = null)
    {
        $returnType = '\QualificationClient\Model\QualificationResponse[]';
        $request = $this->getQualificationsRequest($qualification_type, $id, $worker_id, $status, $rank, $lc_src, $lc_tgt, $preferred_by, $sort_by, $page, $limit, $get_scores);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\QualificationClient\Model\QualificationResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\QualificationClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQualificationsAsync
     *
     * Get all qualifications of the given qualification type
     *
     * @param  string $qualification_type Qualification type. (required)
     * @param  int $id ID of a qualification (optional)
     * @param  int $worker_id ID of a worker (optional)
     * @param  string $status Status of a qualification (optional)
     * @param  string $rank Rank of a qualification (optional)
     * @param  string $lc_src Language source. Example: &#39;en&#39; (optional)
     * @param  string $lc_tgt Language target. Example: &#39;ja&#39; (optional)
     * @param  int $preferred_by Preferred worker by a customer ID (optional)
     * @param  string $sort_by Columns to sort. &#39;-&#39; for descending; &#39;+&#39; for ascending. Example: &#39;-ctime&#39; (optional)
     * @param  int $page Current page (optional)
     * @param  int $limit No. of items per page (optional)
     * @param  bool $get_scores true to get qualification scores (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualificationsAsync($qualification_type, $id = null, $worker_id = null, $status = null, $rank = null, $lc_src = null, $lc_tgt = null, $preferred_by = null, $sort_by = null, $page = null, $limit = null, $get_scores = null)
    {
        return $this->getQualificationsAsyncWithHttpInfo($qualification_type, $id, $worker_id, $status, $rank, $lc_src, $lc_tgt, $preferred_by, $sort_by, $page, $limit, $get_scores)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQualificationsAsyncWithHttpInfo
     *
     * Get all qualifications of the given qualification type
     *
     * @param  string $qualification_type Qualification type. (required)
     * @param  int $id ID of a qualification (optional)
     * @param  int $worker_id ID of a worker (optional)
     * @param  string $status Status of a qualification (optional)
     * @param  string $rank Rank of a qualification (optional)
     * @param  string $lc_src Language source. Example: &#39;en&#39; (optional)
     * @param  string $lc_tgt Language target. Example: &#39;ja&#39; (optional)
     * @param  int $preferred_by Preferred worker by a customer ID (optional)
     * @param  string $sort_by Columns to sort. &#39;-&#39; for descending; &#39;+&#39; for ascending. Example: &#39;-ctime&#39; (optional)
     * @param  int $page Current page (optional)
     * @param  int $limit No. of items per page (optional)
     * @param  bool $get_scores true to get qualification scores (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualificationsAsyncWithHttpInfo($qualification_type, $id = null, $worker_id = null, $status = null, $rank = null, $lc_src = null, $lc_tgt = null, $preferred_by = null, $sort_by = null, $page = null, $limit = null, $get_scores = null)
    {
        $returnType = '\QualificationClient\Model\QualificationResponse[]';
        $request = $this->getQualificationsRequest($qualification_type, $id, $worker_id, $status, $rank, $lc_src, $lc_tgt, $preferred_by, $sort_by, $page, $limit, $get_scores);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQualifications'
     *
     * @param  string $qualification_type Qualification type. (required)
     * @param  int $id ID of a qualification (optional)
     * @param  int $worker_id ID of a worker (optional)
     * @param  string $status Status of a qualification (optional)
     * @param  string $rank Rank of a qualification (optional)
     * @param  string $lc_src Language source. Example: &#39;en&#39; (optional)
     * @param  string $lc_tgt Language target. Example: &#39;ja&#39; (optional)
     * @param  int $preferred_by Preferred worker by a customer ID (optional)
     * @param  string $sort_by Columns to sort. &#39;-&#39; for descending; &#39;+&#39; for ascending. Example: &#39;-ctime&#39; (optional)
     * @param  int $page Current page (optional)
     * @param  int $limit No. of items per page (optional)
     * @param  bool $get_scores true to get qualification scores (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQualificationsRequest($qualification_type, $id = null, $worker_id = null, $status = null, $rank = null, $lc_src = null, $lc_tgt = null, $preferred_by = null, $sort_by = null, $page = null, $limit = null, $get_scores = null)
    {
        // verify the required parameter 'qualification_type' is set
        if ($qualification_type === null || (is_array($qualification_type) && count($qualification_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $qualification_type when calling getQualifications'
            );
        }

        $resourcePath = '/qualifications/{qualification_type}/workers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }
        // query params
        if ($worker_id !== null) {
            $queryParams['worker_id'] = ObjectSerializer::toQueryValue($worker_id);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($rank !== null) {
            $queryParams['rank'] = ObjectSerializer::toQueryValue($rank);
        }
        // query params
        if ($lc_src !== null) {
            $queryParams['lc_src'] = ObjectSerializer::toQueryValue($lc_src);
        }
        // query params
        if ($lc_tgt !== null) {
            $queryParams['lc_tgt'] = ObjectSerializer::toQueryValue($lc_tgt);
        }
        // query params
        if ($preferred_by !== null) {
            $queryParams['preferred_by'] = ObjectSerializer::toQueryValue($preferred_by);
        }
        // query params
        if ($sort_by !== null) {
            $queryParams['sort_by'] = ObjectSerializer::toQueryValue($sort_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($get_scores !== null) {
            $queryParams['get_scores'] = ObjectSerializer::toQueryValue($get_scores);
        }

        // path params
        if ($qualification_type !== null) {
            $resourcePath = str_replace(
                '{' . 'qualification_type' . '}',
                ObjectSerializer::toPathValue($qualification_type),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWorkerQualificationsHistory
     *
     * Get worker's qualifications history
     *
     * @param  string $qualification_type Qualification type. (required)
     * @param  int $worker_id ID of a Worker (required)
     * @param  string $sort_by Columns to sort. &#39;-&#39; for descending; &#39;+&#39; for ascending. Example: &#39;-ctime&#39; (optional)
     * @param  int $page Current page (optional)
     * @param  int $limit No. of items per page (optional)
     *
     * @throws \QualificationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \QualificationClient\Model\WorkerQualificationsHistoryResponse[]
     */
    public function getWorkerQualificationsHistory($qualification_type, $worker_id, $sort_by = null, $page = null, $limit = null)
    {
        list($response) = $this->getWorkerQualificationsHistoryWithHttpInfo($qualification_type, $worker_id, $sort_by, $page, $limit);
        return $response;
    }

    /**
     * Operation getWorkerQualificationsHistoryWithHttpInfo
     *
     * Get worker's qualifications history
     *
     * @param  string $qualification_type Qualification type. (required)
     * @param  int $worker_id ID of a Worker (required)
     * @param  string $sort_by Columns to sort. &#39;-&#39; for descending; &#39;+&#39; for ascending. Example: &#39;-ctime&#39; (optional)
     * @param  int $page Current page (optional)
     * @param  int $limit No. of items per page (optional)
     *
     * @throws \QualificationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \QualificationClient\Model\WorkerQualificationsHistoryResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkerQualificationsHistoryWithHttpInfo($qualification_type, $worker_id, $sort_by = null, $page = null, $limit = null)
    {
        $returnType = '\QualificationClient\Model\WorkerQualificationsHistoryResponse[]';
        $request = $this->getWorkerQualificationsHistoryRequest($qualification_type, $worker_id, $sort_by, $page, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\QualificationClient\Model\WorkerQualificationsHistoryResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\QualificationClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWorkerQualificationsHistoryAsync
     *
     * Get worker's qualifications history
     *
     * @param  string $qualification_type Qualification type. (required)
     * @param  int $worker_id ID of a Worker (required)
     * @param  string $sort_by Columns to sort. &#39;-&#39; for descending; &#39;+&#39; for ascending. Example: &#39;-ctime&#39; (optional)
     * @param  int $page Current page (optional)
     * @param  int $limit No. of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkerQualificationsHistoryAsync($qualification_type, $worker_id, $sort_by = null, $page = null, $limit = null)
    {
        return $this->getWorkerQualificationsHistoryAsyncWithHttpInfo($qualification_type, $worker_id, $sort_by, $page, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWorkerQualificationsHistoryAsyncWithHttpInfo
     *
     * Get worker's qualifications history
     *
     * @param  string $qualification_type Qualification type. (required)
     * @param  int $worker_id ID of a Worker (required)
     * @param  string $sort_by Columns to sort. &#39;-&#39; for descending; &#39;+&#39; for ascending. Example: &#39;-ctime&#39; (optional)
     * @param  int $page Current page (optional)
     * @param  int $limit No. of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkerQualificationsHistoryAsyncWithHttpInfo($qualification_type, $worker_id, $sort_by = null, $page = null, $limit = null)
    {
        $returnType = '\QualificationClient\Model\WorkerQualificationsHistoryResponse[]';
        $request = $this->getWorkerQualificationsHistoryRequest($qualification_type, $worker_id, $sort_by, $page, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWorkerQualificationsHistory'
     *
     * @param  string $qualification_type Qualification type. (required)
     * @param  int $worker_id ID of a Worker (required)
     * @param  string $sort_by Columns to sort. &#39;-&#39; for descending; &#39;+&#39; for ascending. Example: &#39;-ctime&#39; (optional)
     * @param  int $page Current page (optional)
     * @param  int $limit No. of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getWorkerQualificationsHistoryRequest($qualification_type, $worker_id, $sort_by = null, $page = null, $limit = null)
    {
        // verify the required parameter 'qualification_type' is set
        if ($qualification_type === null || (is_array($qualification_type) && count($qualification_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $qualification_type when calling getWorkerQualificationsHistory'
            );
        }
        // verify the required parameter 'worker_id' is set
        if ($worker_id === null || (is_array($worker_id) && count($worker_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $worker_id when calling getWorkerQualificationsHistory'
            );
        }

        $resourcePath = '/workers/{worker_id}/qualification-history/{qualification_type}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sort_by !== null) {
            $queryParams['sort_by'] = ObjectSerializer::toQueryValue($sort_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }

        // path params
        if ($qualification_type !== null) {
            $resourcePath = str_replace(
                '{' . 'qualification_type' . '}',
                ObjectSerializer::toPathValue($qualification_type),
                $resourcePath
            );
        }
        // path params
        if ($worker_id !== null) {
            $resourcePath = str_replace(
                '{' . 'worker_id' . '}',
                ObjectSerializer::toPathValue($worker_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation revokeWorkerQualification
     *
     * Revoke worker qualification
     *
     * @param  \QualificationClient\Model\RevokeQualificationRequest[] $qualification qualification (required)
     *
     * @throws \QualificationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \QualificationClient\Model\QualificationResponse[]
     */
    public function revokeWorkerQualification($qualification)
    {
        list($response) = $this->revokeWorkerQualificationWithHttpInfo($qualification);
        return $response;
    }

    /**
     * Operation revokeWorkerQualificationWithHttpInfo
     *
     * Revoke worker qualification
     *
     * @param  \QualificationClient\Model\RevokeQualificationRequest[] $qualification (required)
     *
     * @throws \QualificationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \QualificationClient\Model\QualificationResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function revokeWorkerQualificationWithHttpInfo($qualification)
    {
        $returnType = '\QualificationClient\Model\QualificationResponse[]';
        $request = $this->revokeWorkerQualificationRequest($qualification);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\QualificationClient\Model\QualificationResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\QualificationClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation revokeWorkerQualificationAsync
     *
     * Revoke worker qualification
     *
     * @param  \QualificationClient\Model\RevokeQualificationRequest[] $qualification (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function revokeWorkerQualificationAsync($qualification)
    {
        return $this->revokeWorkerQualificationAsyncWithHttpInfo($qualification)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation revokeWorkerQualificationAsyncWithHttpInfo
     *
     * Revoke worker qualification
     *
     * @param  \QualificationClient\Model\RevokeQualificationRequest[] $qualification (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function revokeWorkerQualificationAsyncWithHttpInfo($qualification)
    {
        $returnType = '\QualificationClient\Model\QualificationResponse[]';
        $request = $this->revokeWorkerQualificationRequest($qualification);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'revokeWorkerQualification'
     *
     * @param  \QualificationClient\Model\RevokeQualificationRequest[] $qualification (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function revokeWorkerQualificationRequest($qualification)
    {
        // verify the required parameter 'qualification' is set
        if ($qualification === null || (is_array($qualification) && count($qualification) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $qualification when calling revokeWorkerQualification'
            );
        }

        $resourcePath = '/workers/qualifications/revoke';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($qualification)) {
            $_tempBody = $qualification;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation startTranslatorProbation
     *
     * Place worker on probation
     *
     * @param  \QualificationClient\Model\ProbationRequest $probation probation (required)
     *
     * @throws \QualificationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \QualificationClient\Model\ProbationResponse[]
     */
    public function startTranslatorProbation($probation)
    {
        list($response) = $this->startTranslatorProbationWithHttpInfo($probation);
        return $response;
    }

    /**
     * Operation startTranslatorProbationWithHttpInfo
     *
     * Place worker on probation
     *
     * @param  \QualificationClient\Model\ProbationRequest $probation (required)
     *
     * @throws \QualificationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \QualificationClient\Model\ProbationResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function startTranslatorProbationWithHttpInfo($probation)
    {
        $returnType = '\QualificationClient\Model\ProbationResponse[]';
        $request = $this->startTranslatorProbationRequest($probation);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\QualificationClient\Model\ProbationResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\QualificationClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation startTranslatorProbationAsync
     *
     * Place worker on probation
     *
     * @param  \QualificationClient\Model\ProbationRequest $probation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function startTranslatorProbationAsync($probation)
    {
        return $this->startTranslatorProbationAsyncWithHttpInfo($probation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation startTranslatorProbationAsyncWithHttpInfo
     *
     * Place worker on probation
     *
     * @param  \QualificationClient\Model\ProbationRequest $probation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function startTranslatorProbationAsyncWithHttpInfo($probation)
    {
        $returnType = '\QualificationClient\Model\ProbationResponse[]';
        $request = $this->startTranslatorProbationRequest($probation);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'startTranslatorProbation'
     *
     * @param  \QualificationClient\Model\ProbationRequest $probation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function startTranslatorProbationRequest($probation)
    {
        // verify the required parameter 'probation' is set
        if ($probation === null || (is_array($probation) && count($probation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $probation when calling startTranslatorProbation'
            );
        }

        $resourcePath = '/workers/qualifications/probations/start';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($probation)) {
            $_tempBody = $probation;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation unrevokeWorkerQualification
     *
     * Unrevoke worker qualification
     *
     * @param  \QualificationClient\Model\UnrevokeQualificationRequest[] $qualification qualification (required)
     *
     * @throws \QualificationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \QualificationClient\Model\QualificationResponse[]
     */
    public function unrevokeWorkerQualification($qualification)
    {
        list($response) = $this->unrevokeWorkerQualificationWithHttpInfo($qualification);
        return $response;
    }

    /**
     * Operation unrevokeWorkerQualificationWithHttpInfo
     *
     * Unrevoke worker qualification
     *
     * @param  \QualificationClient\Model\UnrevokeQualificationRequest[] $qualification (required)
     *
     * @throws \QualificationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \QualificationClient\Model\QualificationResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function unrevokeWorkerQualificationWithHttpInfo($qualification)
    {
        $returnType = '\QualificationClient\Model\QualificationResponse[]';
        $request = $this->unrevokeWorkerQualificationRequest($qualification);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\QualificationClient\Model\QualificationResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\QualificationClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation unrevokeWorkerQualificationAsync
     *
     * Unrevoke worker qualification
     *
     * @param  \QualificationClient\Model\UnrevokeQualificationRequest[] $qualification (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unrevokeWorkerQualificationAsync($qualification)
    {
        return $this->unrevokeWorkerQualificationAsyncWithHttpInfo($qualification)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation unrevokeWorkerQualificationAsyncWithHttpInfo
     *
     * Unrevoke worker qualification
     *
     * @param  \QualificationClient\Model\UnrevokeQualificationRequest[] $qualification (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unrevokeWorkerQualificationAsyncWithHttpInfo($qualification)
    {
        $returnType = '\QualificationClient\Model\QualificationResponse[]';
        $request = $this->unrevokeWorkerQualificationRequest($qualification);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'unrevokeWorkerQualification'
     *
     * @param  \QualificationClient\Model\UnrevokeQualificationRequest[] $qualification (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function unrevokeWorkerQualificationRequest($qualification)
    {
        // verify the required parameter 'qualification' is set
        if ($qualification === null || (is_array($qualification) && count($qualification) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $qualification when calling unrevokeWorkerQualification'
            );
        }

        $resourcePath = '/workers/qualifications/unrevoke';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($qualification)) {
            $_tempBody = $qualification;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateWorkerQualification
     *
     * Update qualification
     *
     * @param  int $worker_id ID of a worker (required)
     * @param  string $qualification_type Qualification type. (required)
     * @param  int $qualification_id Qualification ID. (required)
     * @param  \QualificationClient\Model\QualificationRequest $qualification qualification (required)
     *
     * @throws \QualificationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \QualificationClient\Model\QualificationResponse
     */
    public function updateWorkerQualification($worker_id, $qualification_type, $qualification_id, $qualification)
    {
        list($response) = $this->updateWorkerQualificationWithHttpInfo($worker_id, $qualification_type, $qualification_id, $qualification);
        return $response;
    }

    /**
     * Operation updateWorkerQualificationWithHttpInfo
     *
     * Update qualification
     *
     * @param  int $worker_id ID of a worker (required)
     * @param  string $qualification_type Qualification type. (required)
     * @param  int $qualification_id Qualification ID. (required)
     * @param  \QualificationClient\Model\QualificationRequest $qualification (required)
     *
     * @throws \QualificationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \QualificationClient\Model\QualificationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWorkerQualificationWithHttpInfo($worker_id, $qualification_type, $qualification_id, $qualification)
    {
        $returnType = '\QualificationClient\Model\QualificationResponse';
        $request = $this->updateWorkerQualificationRequest($worker_id, $qualification_type, $qualification_id, $qualification);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\QualificationClient\Model\QualificationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\QualificationClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateWorkerQualificationAsync
     *
     * Update qualification
     *
     * @param  int $worker_id ID of a worker (required)
     * @param  string $qualification_type Qualification type. (required)
     * @param  int $qualification_id Qualification ID. (required)
     * @param  \QualificationClient\Model\QualificationRequest $qualification (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWorkerQualificationAsync($worker_id, $qualification_type, $qualification_id, $qualification)
    {
        return $this->updateWorkerQualificationAsyncWithHttpInfo($worker_id, $qualification_type, $qualification_id, $qualification)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateWorkerQualificationAsyncWithHttpInfo
     *
     * Update qualification
     *
     * @param  int $worker_id ID of a worker (required)
     * @param  string $qualification_type Qualification type. (required)
     * @param  int $qualification_id Qualification ID. (required)
     * @param  \QualificationClient\Model\QualificationRequest $qualification (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWorkerQualificationAsyncWithHttpInfo($worker_id, $qualification_type, $qualification_id, $qualification)
    {
        $returnType = '\QualificationClient\Model\QualificationResponse';
        $request = $this->updateWorkerQualificationRequest($worker_id, $qualification_type, $qualification_id, $qualification);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateWorkerQualification'
     *
     * @param  int $worker_id ID of a worker (required)
     * @param  string $qualification_type Qualification type. (required)
     * @param  int $qualification_id Qualification ID. (required)
     * @param  \QualificationClient\Model\QualificationRequest $qualification (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateWorkerQualificationRequest($worker_id, $qualification_type, $qualification_id, $qualification)
    {
        // verify the required parameter 'worker_id' is set
        if ($worker_id === null || (is_array($worker_id) && count($worker_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $worker_id when calling updateWorkerQualification'
            );
        }
        // verify the required parameter 'qualification_type' is set
        if ($qualification_type === null || (is_array($qualification_type) && count($qualification_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $qualification_type when calling updateWorkerQualification'
            );
        }
        // verify the required parameter 'qualification_id' is set
        if ($qualification_id === null || (is_array($qualification_id) && count($qualification_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $qualification_id when calling updateWorkerQualification'
            );
        }
        // verify the required parameter 'qualification' is set
        if ($qualification === null || (is_array($qualification) && count($qualification) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $qualification when calling updateWorkerQualification'
            );
        }

        $resourcePath = '/workers/{worker_id}/qualifications/{qualification_type}/{qualification_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($worker_id !== null) {
            $resourcePath = str_replace(
                '{' . 'worker_id' . '}',
                ObjectSerializer::toPathValue($worker_id),
                $resourcePath
            );
        }
        // path params
        if ($qualification_type !== null) {
            $resourcePath = str_replace(
                '{' . 'qualification_type' . '}',
                ObjectSerializer::toPathValue($qualification_type),
                $resourcePath
            );
        }
        // path params
        if ($qualification_id !== null) {
            $resourcePath = str_replace(
                '{' . 'qualification_id' . '}',
                ObjectSerializer::toPathValue($qualification_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($qualification)) {
            $_tempBody = $qualification;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
