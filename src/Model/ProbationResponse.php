<?php
/**
 * ProbationResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  QualificationClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * qualification-client
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.22
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace QualificationClient\Model;

use \ArrayAccess;
use \QualificationClient\ObjectSerializer;

/**
 * ProbationResponse Class Doc Comment
 *
 * @category Class
 * @package  QualificationClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProbationResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProbationResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'qualification_id' => 'int',
        'worker_id' => 'int',
        'lc_src' => 'string',
        'lc_tgt' => 'string',
        'status' => 'string',
        'rank' => 'string',
        'ctime' => 'string',
        'mtime' => 'string',
        'reason' => 'string',
        'feedback' => 'string',
        'notes' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'qualification_id' => null,
        'worker_id' => null,
        'lc_src' => null,
        'lc_tgt' => null,
        'status' => null,
        'rank' => null,
        'ctime' => 'datetime',
        'mtime' => 'datetime',
        'reason' => null,
        'feedback' => null,
        'notes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'qualification_id' => 'qualification_id',
        'worker_id' => 'worker_id',
        'lc_src' => 'lc_src',
        'lc_tgt' => 'lc_tgt',
        'status' => 'status',
        'rank' => 'rank',
        'ctime' => 'ctime',
        'mtime' => 'mtime',
        'reason' => 'reason',
        'feedback' => 'feedback',
        'notes' => 'notes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'qualification_id' => 'setQualificationId',
        'worker_id' => 'setWorkerId',
        'lc_src' => 'setLcSrc',
        'lc_tgt' => 'setLcTgt',
        'status' => 'setStatus',
        'rank' => 'setRank',
        'ctime' => 'setCtime',
        'mtime' => 'setMtime',
        'reason' => 'setReason',
        'feedback' => 'setFeedback',
        'notes' => 'setNotes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'qualification_id' => 'getQualificationId',
        'worker_id' => 'getWorkerId',
        'lc_src' => 'getLcSrc',
        'lc_tgt' => 'getLcTgt',
        'status' => 'getStatus',
        'rank' => 'getRank',
        'ctime' => 'getCtime',
        'mtime' => 'getMtime',
        'reason' => 'getReason',
        'feedback' => 'getFeedback',
        'notes' => 'getNotes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['qualification_id'] = isset($data['qualification_id']) ? $data['qualification_id'] : null;
        $this->container['worker_id'] = isset($data['worker_id']) ? $data['worker_id'] : null;
        $this->container['lc_src'] = isset($data['lc_src']) ? $data['lc_src'] : null;
        $this->container['lc_tgt'] = isset($data['lc_tgt']) ? $data['lc_tgt'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['rank'] = isset($data['rank']) ? $data['rank'] : null;
        $this->container['ctime'] = isset($data['ctime']) ? $data['ctime'] : null;
        $this->container['mtime'] = isset($data['mtime']) ? $data['mtime'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['feedback'] = isset($data['feedback']) ? $data['feedback'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets qualification_id
     *
     * @return int
     */
    public function getQualificationId()
    {
        return $this->container['qualification_id'];
    }

    /**
     * Sets qualification_id
     *
     * @param int $qualification_id qualification_id
     *
     * @return $this
     */
    public function setQualificationId($qualification_id)
    {
        $this->container['qualification_id'] = $qualification_id;

        return $this;
    }

    /**
     * Gets worker_id
     *
     * @return int
     */
    public function getWorkerId()
    {
        return $this->container['worker_id'];
    }

    /**
     * Sets worker_id
     *
     * @param int $worker_id worker_id
     *
     * @return $this
     */
    public function setWorkerId($worker_id)
    {
        $this->container['worker_id'] = $worker_id;

        return $this;
    }

    /**
     * Gets lc_src
     *
     * @return string
     */
    public function getLcSrc()
    {
        return $this->container['lc_src'];
    }

    /**
     * Sets lc_src
     *
     * @param string $lc_src lc_src
     *
     * @return $this
     */
    public function setLcSrc($lc_src)
    {
        $this->container['lc_src'] = $lc_src;

        return $this;
    }

    /**
     * Gets lc_tgt
     *
     * @return string
     */
    public function getLcTgt()
    {
        return $this->container['lc_tgt'];
    }

    /**
     * Sets lc_tgt
     *
     * @param string $lc_tgt lc_tgt
     *
     * @return $this
     */
    public function setLcTgt($lc_tgt)
    {
        $this->container['lc_tgt'] = $lc_tgt;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets rank
     *
     * @return string
     */
    public function getRank()
    {
        return $this->container['rank'];
    }

    /**
     * Sets rank
     *
     * @param string $rank rank
     *
     * @return $this
     */
    public function setRank($rank)
    {
        $this->container['rank'] = $rank;

        return $this;
    }

    /**
     * Gets ctime
     *
     * @return string
     */
    public function getCtime()
    {
        return $this->container['ctime'];
    }

    /**
     * Sets ctime
     *
     * @param string $ctime ctime
     *
     * @return $this
     */
    public function setCtime($ctime)
    {
        $this->container['ctime'] = $ctime;

        return $this;
    }

    /**
     * Gets mtime
     *
     * @return string
     */
    public function getMtime()
    {
        return $this->container['mtime'];
    }

    /**
     * Sets mtime
     *
     * @param string $mtime mtime
     *
     * @return $this
     */
    public function setMtime($mtime)
    {
        $this->container['mtime'] = $mtime;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason reason
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets feedback
     *
     * @return string
     */
    public function getFeedback()
    {
        return $this->container['feedback'];
    }

    /**
     * Sets feedback
     *
     * @param string $feedback feedback
     *
     * @return $this
     */
    public function setFeedback($feedback)
    {
        $this->container['feedback'] = $feedback;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


